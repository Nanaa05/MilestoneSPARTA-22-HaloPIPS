// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model UserHMIF {
  id       String    @id @default(cuid())
  name     String?
  username String?   @unique
  password String?
  image    String?
  kampus   String?
  NIM      Int?
  angkatan Int?
  status   String?
  rate     Int[]     @default([0, 0, 0, 0, 0])
  review   String[]  @default([])
  jurusan  String?
  idline   String?
  jabatan  String?
  friends  Json[]    @default([])
  accounts Account[]
  instagram String?
  linkedin String?

  @@map("UserHMIF")
}

model UserTPB {
  id       String    @id @default(cuid())
  name     String?
  username String?   @unique
  password String?
  image    String?
  NIM      Int?
  angkatan Int?
  rate     Float?
  fakultas String?
  friends  Json[]    @default([])
  accounts Account[]
  instagram String?
  linkedin String?

  @@map("UserTPB")
}

model ChatRoom {
  chatID   String   @id
  members  String[]
  messages Json[]   @default([])

  @@map("ChatRoom")
}

model Account {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  type              String
  provider          String
  providerAccountId String    @map("provider_account_id")
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  UserHMIF          UserHMIF? @relation(fields: [userHMIFId], references: [id])
  userHMIFId        String?
  UserTPB           UserTPB?  @relation(fields: [userTPBId], references: [id])
  userTPBId         String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
